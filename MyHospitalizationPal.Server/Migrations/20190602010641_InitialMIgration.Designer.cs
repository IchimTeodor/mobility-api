// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyHospitalizationPal.DAL.Models;

namespace MyHospitalizationPal.Server.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20190602010641_InitialMIgration")]
    partial class InitialMIgration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyHospitalizationPal.DAL.Models.DailySchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("HeathProfessionalId");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("HeathProfessionalId");

                    b.ToTable("DailySchedule");
                });

            modelBuilder.Entity("MyHospitalizationPal.DAL.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("MyHospitalizationPal.DAL.Models.EmergencyContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("PatientId")
                        .HasColumnName("PatientID");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("EmergencyContact");
                });

            modelBuilder.Entity("MyHospitalizationPal.DAL.Models.Encounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BraceletTagId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DateOfDischarge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("DateOfHospitalization")
                        .HasColumnType("datetime");

                    b.Property<int>("DepartmentId");

                    b.Property<string>("Details")
                        .HasMaxLength(50);

                    b.Property<int>("PatientId")
                        .HasColumnName("PatientID");

                    b.Property<int>("RoomId");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("Encounter");
                });

            modelBuilder.Entity("MyHospitalizationPal.DAL.Models.EncounterNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateOfDocumentation")
                        .HasColumnType("datetime");

                    b.Property<int>("EncounterId")
                        .HasColumnName("EncounterID");

                    b.HasKey("Id");

                    b.HasIndex("EncounterId");

                    b.ToTable("EncounterNote");
                });

            modelBuilder.Entity("MyHospitalizationPal.DAL.Models.Feeling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EncounterNoteId");

                    b.Property<string>("FeelingType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("EncounterNoteId");

                    b.ToTable("Feeling");
                });

            modelBuilder.Entity("MyHospitalizationPal.DAL.Models.HealthProfessional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("EmergencyPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Photo")
                        .HasMaxLength(50);

                    b.Property<string>("ReviewMark")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("HealthProfessional");
                });

            modelBuilder.Entity("MyHospitalizationPal.DAL.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsInsured");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasMaxLength(15);

                    b.Property<string>("ProfilePicturePath")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("MyHospitalizationPal.DAL.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoomNumber");

                    b.HasKey("Id");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("MyHospitalizationPal.DAL.Models.ScheduledEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignedHealthProfessionalD");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<int>("EncounterId")
                        .HasColumnName("EncounterID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsSpecialNoteMandatory");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SpecialNote")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("AssignedHealthProfessionalD");

                    b.HasIndex("EncounterId");

                    b.ToTable("ScheduledEvent");
                });

            modelBuilder.Entity("MyHospitalizationPal.DAL.Models.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfExpiration")
                        .HasColumnType("datetime");

                    b.Property<int>("EncounterId")
                        .HasColumnName("EncounterID");

                    b.Property<bool>("IsActive");

                    b.Property<int>("NumberLoginAttempts");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("UniqueCodeId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("EncounterId");

                    b.ToTable("UserInfo");
                });

            modelBuilder.Entity("MyHospitalizationPal.DAL.Models.DailySchedule", b =>
                {
                    b.HasOne("MyHospitalizationPal.DAL.Models.HealthProfessional", "HeathProfessional")
                        .WithMany("DailySchedule")
                        .HasForeignKey("HeathProfessionalId")
                        .HasConstraintName("FK_DailySchedule_HealthProfessional");
                });

            modelBuilder.Entity("MyHospitalizationPal.DAL.Models.EmergencyContact", b =>
                {
                    b.HasOne("MyHospitalizationPal.DAL.Models.Patient", "Patient")
                        .WithMany("EmergencyContact")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_EmergencyContact_Patient");
                });

            modelBuilder.Entity("MyHospitalizationPal.DAL.Models.Encounter", b =>
                {
                    b.HasOne("MyHospitalizationPal.DAL.Models.Department", "Department")
                        .WithMany("Encounter")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Encounter_Department");

                    b.HasOne("MyHospitalizationPal.DAL.Models.Patient", "Patient")
                        .WithMany("Encounter")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_Encounter_Patient");

                    b.HasOne("MyHospitalizationPal.DAL.Models.Room", "Room")
                        .WithMany("Encounter")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FK_Encounter_Room");
                });

            modelBuilder.Entity("MyHospitalizationPal.DAL.Models.EncounterNote", b =>
                {
                    b.HasOne("MyHospitalizationPal.DAL.Models.Encounter", "Encounter")
                        .WithMany("EncounterNote")
                        .HasForeignKey("EncounterId")
                        .HasConstraintName("FK_PatientNote_Encounter");
                });

            modelBuilder.Entity("MyHospitalizationPal.DAL.Models.Feeling", b =>
                {
                    b.HasOne("MyHospitalizationPal.DAL.Models.EncounterNote", "EncounterNote")
                        .WithMany("Feeling")
                        .HasForeignKey("EncounterNoteId")
                        .HasConstraintName("FK_Feeling_PatientNote");
                });

            modelBuilder.Entity("MyHospitalizationPal.DAL.Models.ScheduledEvent", b =>
                {
                    b.HasOne("MyHospitalizationPal.DAL.Models.HealthProfessional", "AssignedHealthProfessionalDNavigation")
                        .WithMany("ScheduledEvent")
                        .HasForeignKey("AssignedHealthProfessionalD")
                        .HasConstraintName("FK_ScheduledEvent_HealthProfessional");

                    b.HasOne("MyHospitalizationPal.DAL.Models.Encounter", "Encounter")
                        .WithMany("ScheduledEvent")
                        .HasForeignKey("EncounterId")
                        .HasConstraintName("FK_ScheduledEvent_Encounter");
                });

            modelBuilder.Entity("MyHospitalizationPal.DAL.Models.UserInfo", b =>
                {
                    b.HasOne("MyHospitalizationPal.DAL.Models.Encounter", "Encounter")
                        .WithMany("UserInfo")
                        .HasForeignKey("EncounterId")
                        .HasConstraintName("FK_UserInfo_Encounter");
                });
#pragma warning restore 612, 618
        }
    }
}
